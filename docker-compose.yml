
services:
  zookeeper:
    image: wurstmeister/zookeeper
    ports:
      - "2181:2181"

  kafka:
    image: wurstmeister/kafka:2.13-2.8.1
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    depends_on:
      - zookeeper
    healthcheck:
      test: ["CMD", "bash", "-c", "echo > /dev/tcp/localhost/9092"]
      interval: 10s
      timeout: 5s
      retries: 12

  spark-master:
    image: bitnami/spark:3.4.1
    container_name: spark-master
    environment:
      - SPARK_MODE=master
    ports:
      - "7077:7077"
      - "8080:8080"
    volumes:
      - spark-ivy-cache:/root/.ivy2

  spark-worker-1:
    image: bitnami/spark:3.4.1
    container_name: spark-worker-1
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
    depends_on:
      - spark-master
    volumes:
      - spark-ivy-cache:/root/.ivy2
      - ./data:/data
    ports:
      - "8081:8081"

  spark-worker-2:
    image: bitnami/spark:3.4.1
    container_name: spark-worker-2
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
    depends_on:
      - spark-master
    volumes:
      - spark-ivy-cache:/root/.ivy2
      - ./data:/data
    ports:
      - "8082:8081"

  weather-producer:
    build:
      context: .
      dockerfile: producer/Dockerfile
    depends_on:
      - kafka
    env_file:
      - .env

  spark-job:
    build:
      context: .
      dockerfile: spark/Dockerfile
    depends_on:
      - kafka
      - spark-master
    volumes:
      - ./data:/data
      - ./configs:/app/configs
      - ./spark/weather_stream_processor.py:/app/weather_stream_processor.py
      - ./.env:/app/.env
      - spark-ivy-cache:/root/.ivy2

volumes:
  spark-ivy-cache:
